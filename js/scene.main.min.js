phina.define("MainScene", {
  superClass: 'DisplayScene',

  init: function(params) {
    gameMode = params.mode;
    if (gameMode === 'all') {
      maxQuestion = 100;
    }

    SoundManager.setVolumeMusic(0.1);
    SoundManager.playMusic('bgmMain');

    this.superInit({
      width: SCREEN_WIDTH,
      height: SCREEN_HEIGHT
    });

    this.bg = Sprite('bg').addChildTo(this);
    this.bg.origin.set(0, 0);

    this.time = 0;
    this.correct = 0;
    this.currentNo = 0;
    this.incorrectList = [];

    this.group = DisplayElement().addChildTo(this);

    const qLabel = LabelArea('').addChildTo(this);
    qLabel.left = 158;
    qLabel.top = 200;
    qLabel.width = SCREEN_WIDTH - 70;
    qLabel.height = 300;
    qLabel.fill = '#444';
    qLabel.fontSize = 30;
    qLabel.baseline = 'top';
    this.qTitle = qLabel;

    this.currentQuestionSet = null;
    this.panels = [null, null, null, null];

    // タイマーラベルを生成
    const timerLabel = Label('0').addChildTo(this);
    timerLabel.origin.x = 1;
    timerLabel.x = SCREEN_WIDTH / 2 + 70;
    timerLabel.y = 130;

    timerLabel.stroke = '#444';
    timerLabel.strokeWidth = 5;
    timerLabel.fill = '#eee';

    timerLabel.fontSize = 70;
    timerLabel.baseline = 'bottom';
    this.timerLabel = timerLabel;

    const noLabel = Label('0').addChildTo(this);
    noLabel.x = 124;
    noLabel.y = 222;
    //noLabel.stroke = '#444';
    //noLabel.strokeWidth = 5;
    noLabel.fill = '#fdaec8';
    noLabel.fontSize = 50;
    noLabel.baseline = 'bottom';
    this.noLabel = noLabel;

    const twitLabel = Label('#' + APP_HASHTAG).addChildTo(this);
    twitLabel.x = 325;
    twitLabel.y = 905;
    twitLabel.fill = '#111';
    twitLabel.fontSize = 25;
    twitLabel.fontWight = 'bold';
    twitLabel.baseline = 'bottom';

    const gauge = Gauge({
      x: 320,
      y: 420,
      width: 400,
      height: 30,
      cornerRadius: 10,
      maxValue: 100,
      value: (gameMode === 'all') ? this.currentNo-1 : (this.currentNo-1) * 10,
      fill: 'white',
      gaugeColor: 'skyblue',
      stroke: 'silver',
      strokeWidth: 5
    }).addChildTo(this);
    this.gauge = gauge;

    this.prepareQuestionsAndPanel();
    this.updateQuestion();

    this.onpointstart = function(e) {
      const p = e.pointer;
      const wave = Wave().addChildTo(this);
      wave.x = p.x;
      wave.y = p.y;
    };
  },

  // 問題と選択肢オブジェクトを準備
  prepareQuestionsAndPanel: function() {
    const gridX = Grid(BOARD_SIZE, 5);
    const gridY = Grid(BOARD_SIZE, 5);
    const self = this;

    // 全問セット
    questions = (gameMode === 'all') ? videos.shuffle().slice(0, maxQuestion) : videos.filter((i) => {return gameMode === i.type}).shuffle().slice(0, maxQuestion);

    Array.range(0, 4).each((item, i) => {
      this.panels[i] = Panel('noimage').addChildTo(self.group);
      this.panels[i].left = ((i+1) % 2 === 0) ? 320 : 0;
      this.panels[i].top = (i+1 < 3) ? 450 : 650;

      this.panels[i].onpointstart = function() {
        self.check(this);
      };
      this.panels[i].appear();
    })
  },

  // 問題を表示
  updateQuestion: function() {
    const self = this;
    this.currentQuestionSet = this.getCandidates();
    this.panels.each(function(item, i) {
      self.panels[i].setData(self.currentQuestionSet[i]);
    });

    let title = '';
    for (let i in self.currentQuestionSet) {
      if (self.currentQuestionSet[i].correct) {
        title = self.currentQuestionSet[i].title;
        break;
      }
    }
    this.qTitle.text = title + 'のサムネイルはどれでしょう？';
    ++this.currentNo;
    this.gauge.setValue( (gameMode === 'all') ? this.currentNo-1 : (this.currentNo-1) * 10 );
  },

  // 選択肢を取得
  getCandidates: () => {
    const self = this;
    const correct = questions.shift();
    if (! correct) {
      return null;
    }

    let copy = {};
    Object.assign(copy , correct);
    copy.correct = true;

    const candidates = (gameMode === 'all')
      ? videos.shuffle().slice(0, 4)
      : videos.filter(function(i) {return gameMode === i.type}).shuffle().slice(0, 4);

    let result = [];
    for (let i in candidates) {
      if (result.length >= 3) {
        break;
      }
      if (copy.title === candidates[i].title) {
        continue;
      }
      result.push(candidates[i]);
    }

    result.push(copy);
    result.shuffle();
    return result;
  },

  update: function(app) {
    this.time += app.ticker.deltaTime;
    const sec = this.time / 1000;
    this.timerLabel.text = sec.toFixed(1);

    this.noLabel.text = '.' +  ('00' + this.currentNo).slice(-2);
  },

  check: function(panel) {
    panel.alpha = 0.5;
    panel.alpha = 1.0;
    for (let i in this.panels) {
      this.panels[i].setInteractive(false);
    }
    setTimeout(() => {
      for (let i in this.panels) {
        this.panels[i].setInteractive(true);
      }
    }, 500);

    if (panel.isCorrect()) {
      SoundManager.play('correct');
      ++this.correct;
    }
    else {
      for (let i in this.panels) {
        if (this.panels[i].data.correct) {
          this.incorrectList.push(this.panels[i].data);
          break;
        }
      }
      SoundManager.play('incorrect');
    }

    for (let i in this.panels) {
      if (this.panels[i].data.correct) {
        Circle({target: this.panels[i], correct: panel.isCorrect()}).addChildTo(this);
      }
    }

    // result
    if (this.currentNo >= maxQuestion) {
      SoundManager.setVolumeMusic(0.1);
      SoundManager.playMusic('bgmResult');

      if (this.incorrectList.length === 0) {
        this.incorrectList.push(this.panels[0].data);
      }
      const recommend = {
        id: this.incorrectList[0].id,
        title: this.incorrectList[0].title,
        image: this.incorrectList[0].image
      };

      let score = this.correct * 10 - Math.floor(this.time / 2000);
      if (score < 0) score = 0;
      const time = this.time / 1000;
      const modeNames = {game: 'ゲーム実況', tame: '雑学・その他', all: '総合'};
      const mode = modeNames[gameMode];

      const result = mode + ' ' + maxQuestion + '問中' + this.correct + '問正解\nタイム ' + time.toFixed(1) + '';

      let comment = '';
      if (this.correct === maxQuestion && gameMode === 'all') {
        comment = 'やりおるマンだぁぁぁぁぁぁ!!!!';
      }
      else if (this.correct >= Math.floor(maxQuestion * 0.8)) {
        comment = 'いーねっ！';
      }
      else {
        comment = '反省してっ！';
      }

      const message = result + '\n' + comment;
      this.exit('ResultScene', {
        score: score,
        message: message,
        url: APP_URI,
        hashtags: APP_HASHTAG,
        recommend: recommend
      });
    }
    else {
      setTimeout(() => {
        this.updateQuestion();
      }, 400);
    }
  }

});
