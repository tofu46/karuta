/**
 * @author otouhu46
 */

phina.globalize()

const APP_TITLE = 'シロのサムネ復習会';
const APP_HASHTAG = 'シロのサムネ復習会';
const APP_URI = '';

const SCREEN_WIDTH    = 640;
const SCREEN_HEIGHT   = 960;

const PIECE_SIZE      = 150;
const BOARD_PADDING   = 40;
const BOARD_SIZE      = SCREEN_WIDTH - BOARD_PADDING * 2;
const BOARD_OFFSET_X  = BOARD_PADDING+PIECE_SIZE / 2;

const PIECE_APPEAR_ANIMATION = {
  tweens: [
    ['to', {rotation:360}, 500],
    ['set', {rotation:0}]
  ]
};

var videos = [];
var images = {
  noimage: 'https://i.ytimg.com/vi/fLC5TE_KYcw/mqdefault.jpg',
  bg: './resources/image/bg.png'
};

(function (handleload) {
  const xhr = new XMLHttpRequest;
  xhr.addEventListener('load', handleload, false);
  xhr.open('GET', 'videos.json', true);
  xhr.send(null);
}(function handleLoad (event) {
  const xhr = event.target;
  videos = JSON.parse(xhr.responseText).items;
  videos.each((item, i) => {
    const label = item.id;
    images[label] = item.image;
  });

  phina.main(function() {
    var app = GameApp({
      title: APP_TITLE,
      startLabel: location.search.substr(1).toObject().scene || 'title',
      width: SCREEN_WIDTH,
      height: SCREEN_HEIGHT,
      assets: ASSETS
    });
    //app.enableStats()
    app.domElement.addEventListener('touchend', function dummy() {
      var s = phina.asset.Sound();
      s.loadFromBuffer();
      s.play().stop();
      app.domElement.removeEventListener('touchend', dummy);
    });
    app.replaceScene(MyScenes());
    app.run();
  });
}));

var ASSETS = {
  sound: {
    bgmTitle: './resources/bgm/title.mp3',
    bgmMain:   './resources/bgm/main.mp3',
    bgmResult: './resources/bgm/result.mp3',
    correct:   './resources/se/correct.mp3',
    incorrect: './resources/se/incorrect.mp3'
  },
  image: images
};

var maxQuestion = 10;
var gameMode = 'all';
var questions = [];

// 選択肢
phina.define('Panel', {
  superClass: 'Sprite',

  init: function(image, width, height) {
    this.superInit(image, width, height);
    this.setInteractive(true);
  },

  update: function() {
    /*
    if (! 'data' in this) {
      return
    }
    const now = (new Date).getTime()
    const length = Math.floor( (now - this.start) / 200 ) + 1
    this.text = this.data.title.substr(0, length)*/
  },

  isCorrect: function() {
    return this.data.correct === true;
  },

  setData: function(data) {
    this.data = data;
    this.setImage(data.id, 320-32, 180-18);
  },

  appear: function() {
    this.tweener
      .clear()
      .fromJSON(PIECE_APPEAR_ANIMATION);
  }
});

phina.define('Circle', {
  superClass: 'CircleShape',

  init: function(options) {
    this.target = options.target;
    options = (options || {}).$safe({
      fill: null,
      stroke: (options.correct) ? '#ff0000' : '#0000ff',
      strokeWidth: 25,
      radius: 120,
      x: 0,
      y: 0
    });
    this.superInit(options);
    this.alpha = 0.6;
  },

  update: function(app) {
    const self = this;
    const p = app.pointer;

    this.x = this.target.x;
    this.y = this.target.y;

    setTimeout(() => {
      self.remove();
    }, 400);
  }
});

phina.define("MyScenes", {
  superClass: "phina.game.ManagerScene",

  init: function() {
    this.superInit({
      scenes: [
        {label: "TitleScene", className: "TitleScene", arguments: {title: APP_TITLE}},
        {label: "MainScene", className: "MainScene"},
        {label: "ResultScene", className: "ResultScene"},
        {label: "AboutScene", className: "AboutScene"}
      ]
    });
  }
});